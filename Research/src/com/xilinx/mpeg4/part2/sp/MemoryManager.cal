/* 
BEGINCOPYRIGHT X
	
	Copyright (c) 2004-2005, Xilinx Inc.
	All rights reserved.
	
	Redistribution and use in source and binary forms, 
	with or without modification, are permitted provided 
	that the following conditions are met:
	- Redistributions of source code must retain the above 
	  copyright notice, this list of conditions and the 
	  following disclaimer.
	- Redistributions in binary form must reproduce the 
	  above copyright notice, this list of conditions and 
	  the following disclaimer in the documentation and/or 
	  other materials provided with the distribution.
	- Neither the name of the copyright holder nor the names 
	  of its contributors may be used to endorse or promote 
	  products derived from this software without specific 
	  prior written permission.
	
	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
	CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
	INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
	MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
	DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
	CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
	SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
	NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
	HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
	CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
	OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
	SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	
ENDCOPYRIGHT
*/
// MemoryManager.cal
//
// Author: David B. Parlour (dave.parlour@xilinx.com)
//
// Frame buffer address generation for motion compensation


package com.xilinx.mpeg4.part2.sp;

import org.sc29.wg11.mpeg4.part2.Constants.BTYPE_SZ;
import org.sc29.wg11.mpeg4.part2.Constants.MAXW_XBITS;
import org.sc29.wg11.mpeg4.part2.Constants.MAXH_YBITS;

import org.ietr.mpeg4.part2.sp.ConstantsBtype.INTRA;
import org.ietr.mpeg4.part2.sp.ConstantsBtype.NEWVOP;

actor MemoryManager() int(size=BTYPE_SZ) BTYPE ==> int(size=32) RA , uint(size=32) WA :

	function mask_bits(int v, int n) --> int :
		v & ((1 << n) - 1)
	end

	// Frame buffer organization:
	// Address     FRAMEBITS  YBITS  XBITS  COMPBITS  BLOCKBITS 
	// Data are stored as 32 bit words representing 4 horizontally consecutive pixels.
	// This allows an entire macroblock to be streamed to/from DRAM in one burst.

	//int FRAMEBITS       = log2_ceil( 2 );                 // Current, prev. frame
	int FRAMEBITS = 1;

	int COMPBITS = 3;

	//int YBITS           = log2_ceil( MAXH_IN_MB );
	int YBITS = MAXH_YBITS;
	
	//int XBITS           = log2_ceil( MAXW_IN_MB );
	int XBITS = MAXW_XBITS;

	// int BLOCKBITS       = log2_ceil( BLOCKSIZE / PIXELS_PER_WORD ) ;
	int BLOCKBITS = 4;

	int COMPSHIFT = BLOCKBITS;

	int XSHIFT = COMPSHIFT + COMPBITS;

	int YSHIFT = XSHIFT + XBITS;

	int FRAMESHIFT = YSHIFT + YBITS;

	int(size=COMPBITS + 1) comp := 0;

	int(size=YBITS + 1) this_mby;

	int(size=XBITS + 1) this_mbx;

	int(size=YBITS + 1) next_mby;

	int(size=XBITS + 1) next_mbx;

	int(size=XBITS + 1) width;

	int(size=FRAMEBITS + 1) this_frame := 0;

	int(size=FRAMEBITS + 1) last_frame;

	bool prediction_is_IVOP;

	// Get the starting address of a block
	function address(int f, int y, int x) --> int 
	var
		int xm = mask_bits(x, XBITS) << XSHIFT,
		int ym = mask_bits(y, YBITS) << YSHIFT,
		int fm = mask_bits(f, FRAMEBITS) << FRAMESHIFT :

		fm | (ym | xm)
	end

	// Move the frame counter at the start of the VOP
	cmd.newVop: action BTYPE:[ cmd ] ==>
	guard
		(cmd & NEWVOP) != 0
	do
		next_mbx := 0;
		next_mby := 0;
		comp := 0;
		prediction_is_IVOP := (cmd & INTRA) != 0;
		last_frame := this_frame;
		this_frame := mask_bits(this_frame + 1, FRAMEBITS);
	end

	set_width: action BTYPE:[ w ] ==>
	do
		width := w;
	end

	height: action BTYPE:[ h ] ==>
	end

	cmd.y0: action BTYPE:[ cmd ] ==> WA:[ address(this_frame, this_mby, this_mbx) ]
	guard
		comp = 0
	do
		this_mbx := next_mbx;
		this_mby := next_mby;
		// Figure out where the next MB will be.
		next_mbx := next_mbx + 1;
		if next_mbx = width then
			next_mbx := 0;
			next_mby := next_mby + 1;
		end
		comp := 1;
	end

	cmd.other: action BTYPE:[ cmd ] ==>
	do
		comp := if comp = 5 then 0 else comp + 1 end;
	end

	// Read address generation is either done or not needed
	read.none: action ==>
	guard
		prediction_is_IVOP
	end

	read.above: action ==> RA:[ address(last_frame, this_mby - 1, this_mbx) ]
	end

	read.this: action ==> RA:[ address(last_frame, this_mby, this_mbx) ]
	end

	read.below: action ==> RA:[ address(last_frame, this_mby + 1, this_mbx) ]
	end

	schedule fsm cmd :
		cmd (cmd.newVop) --> getw;
		cmd (cmd.y0)     --> readAbove;
		cmd (cmd.other)  --> cmd;

		getw (set_width) --> geth;
		geth (height)    --> cmd;
		
		// readAbove
		readAbove (read.none)  --> cmd;
		readAbove (read.above) --> readThis;
		readThis  (read.this)  --> readBelow;
		readBelow (read.below) --> cmd;
	end

	priority
		cmd.newVop > cmd.y0 > cmd.other;
		read.none > read.above;
	end

end