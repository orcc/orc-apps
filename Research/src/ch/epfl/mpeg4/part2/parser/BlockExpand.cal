/*
 * Copyright (c) 2011, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
  
// Author: Ghislain Roquier <ghislain.roquier@epfl.ch>

package ch.epfl.mpeg4.part2.parser;

import org.sc29.wg11.mpeg4.part2.Constants.BLOCK_SIZE;
import org.sc29.wg11.mpeg4.part2.Constants.SAMPLE_SZ;
import org.sc29.wg11.mpeg4.part2.Constants.SAMPLE_COUNT_SZ;

actor BlockExpand () 
	int(size=SAMPLE_COUNT_SZ) RUN, int(size=SAMPLE_SZ) VALUE, bool LAST 
	==> 
	int(size=SAMPLE_SZ) QFS :

/*
	int(size=SAMPLE_COUNT_SZ) count;

	int(size=SAMPLE_SZ) qfs[64];
	 
	start: action ==>
	do
		qfs := [0 : for int i in 0 .. 63];
		count := 0;
	end

	last: action RUN:[ run ], VALUE:[ value ], LAST:[ last ]  ==> QFS:[ qfs ] repeat 64
	guard last
	do
		qfs[count + run] := value;
	end

	run: action RUN:[ run ], VALUE:[ value ], LAST:[ last ] ==>
	do
		qfs[count + run] := value;
		count := count + run + 1;
	end
		
	schedule fsm start :
		start (start) --> run;
		run (run) --> run;
		run (last) --> start;
	end
	
	priority last > run; end*/
	
	int(size=SAMPLE_COUNT_SZ) count := 0;

	int(size=SAMPLE_COUNT_SZ) run := -1;

	int(size=SAMPLE_SZ) next_value;

	bool last := false;


	done: action ==>
	guard
		count = BLOCK_SIZE
	do
		count := 0;
		run := -1;
		last := false;
	end

	write.value: action ==> QFS:[ next_value ]
	guard
		run = 0
	do
		run := -1;
		count := count + 1;
	end

	write.zero: action ==> QFS:[ 0 ]
	guard
		run > 0 or last
	do
		run := run - 1;
		count := count + 1;
	end

	
	read.immediate: action RUN:[ r ], VALUE:[ v ], LAST:[ l ] ==> QFS:[ v ]
	guard
		r = 0,
		count != BLOCK_SIZE
	do
		last := l;
		count := count + 1;
	end

	read.save: action RUN:[ r ], VALUE:[ v ], LAST:[ l ] ==> QFS:[ 0 ]
	guard
		count != BLOCK_SIZE
	do
		run := r - 1;
		next_value := v;
		last := l;
		count := count + 1;
	end

	priority
		done > read;
		done > write;
		write > read;
		read.immediate > read.save;
		write.value > write.zero;
	end
	

end