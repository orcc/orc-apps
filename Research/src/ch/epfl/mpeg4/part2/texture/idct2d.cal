package ch.epfl.mpeg4.part2.texture;

import std.util.Math.*;

actor idct2d()
	int(size=13) F, bool SIGNED ==> int(size=9) OUT :

	int A = 1024;

	int B = 1138;

	int C = 1730;

	int D = 1609;

	int E = 1264;

	int F = 1922;

	int G = 1788;

	int H = 2923;

	int I = 2718;

	int J = 2528;

	List(type: int(size=13), size=64) scale = [
		A, B, C, D, A, D, C, B,
		B, E, F, G, B, G, F, E,
		C, F, H, I, C, I, H, F,
		D, G, I, J, D, J, I, G,
		A, B, C, D, A, D, C, B,
		D, G, I, J, D, J, I, G, 
		C, F, H, I, C, I, H, F,
		B, E, F, G, B, G, F, E
	];


/* procedure pmul_1(int y, int z)
    var
    	int y2, int y3
    begin
    	y2 := (y >> 3) - (y >> 7);
    	y3 := y2 - (y >> 11);
    	z  := y2 + (y3 >> 1);
    	y  := y - y2;
	end
	
	procedure pmul_2(int y, int z)
    var
    	int y2
    begin
    	y2 := (y >> 9) - y;
    	z  := y >> 1;
    	y  := (y2 >> 2) - y2;
	end
	
	procedure pmul_3(int y, int z)
    var
    	int y2, int y3
    begin
    	y2 := y + (y >> 5);
    	y3 := y2 >> 2;
    	y  := y3 + (y >> 4);
    	z  := y2 - y3;
	end*/
	  
	action F:[ x ] repeat 64, SIGNED:[ s ] ==> OUT:[ out ] repeat 64
	var int min, int X[64], int Y[64], int(size=9) out[64]
	do
		X := [ scale[n] * x[n] : for int n in 0 .. 63 ];
		X[0] := X[0] + 4096;

		idct1d(X, Y);

		idct1d(Y, X);

		min := if s then  -255 else 0 end;
		foreach int i in 0 .. 63 do
			X[i] := X[i] >> 13;
			out[i] := clip_i32(X[i], min, 255);
		end
	end

	procedure idct1d(int X[64], int Y[64])
	var
		int temp1,
		int temp2,
		int temp3,
		int temp4,
		int x0,
		int x1,
		int x2,
		int x3,
		int x4,
		int x5,
		int x6,
		int x7,		
		int xa,
		int xb
	begin
		foreach int i in 0 .. 7 do
			x0 := X[8*i + 0];
			x1 := X[8*i + 1];
			x2 := X[8*i + 2];
			x3 := X[8*i + 3];
			x4 := X[8*i + 4];
			x5 := X[8*i + 5];
			x6 := X[8*i + 6];
			x7 := X[8*i + 7];
			xa := x1 + x7;
			xb := x1 - x7;
			x1 := xa + x3;
			x3 := xa - x3;
			x7 := xb + x5;
			x5 := xb - x5;
/* 			pmul_1(x3, xa);
			pmul_1(x5, xb);
  			x3 = x3 - xb;
  			x5 = x5 + xa; */
			temp1 := pmul_1_1(x3);
			temp4 := pmul_1_2(x3);
			temp3 := pmul_1_1(x5);
			temp2 := pmul_1_2(x5);
			x3 := temp1 - temp2;
			x5 := temp3 + temp4;
/* 			pmul_2(x1, xa);
			pmul_2(x7, xb);
			x1 = x1 + xb;
  			x7 = x7 - xa;*/
			temp1 := pmul_2_1(x1);
			temp4 := pmul_2_2(x1);
			temp3 := pmul_2_1(x7);
			temp2 := pmul_2_2(x7);
			x1 := temp1 + temp2;
			x7 := temp3 - temp4;
/*			pmul_3(x2, xa);
			pmul_3(x6, xb);
			x2 = x2 - xb;
  			x6 = x6 + xa;*/
			temp1 := pmul_3_1(x2);
			temp4 := pmul_3_2(x2);
			temp3 := pmul_3_1(x6);
			temp2 := pmul_3_2(x6);
			x2 := temp1 - temp2;
			x6 := temp3 + temp4;
			xa := x0 + x4;
			xb := x0 - x4;
			x0 := xa + x6;
			x6 := xa - x6;
			x4 := xb + x2;
			x2 := xb - x2;
			Y[i + 8*0] := x0 + x1;
			Y[i + 8*1] := x4 + x5;
			Y[i + 8*2] := x2 + x3;
			Y[i + 8*3] := x6 + x7;
			Y[i + 8*4] := x6 - x7;
			Y[i + 8*5] := x2 - x3;
			Y[i + 8*6] := x4 - x5;
			Y[i + 8*7] := x0 - x1;
		end
	end

	function pmul_1_1(int X) --> int
	var
		int Temp1 = (X >> 3) - (X >> 7)
	:
		X - Temp1
	end

	function pmul_1_2(int X) --> int
	var
		int Temp1 = (X >> 3) - (X >> 7),
		int Temp2 = Temp1 - (X >> 11)
	:
		Temp1 + (Temp2 >> 1)
	end

	function pmul_2_1(int X) --> int
	var
		int Temp1 = (X >> 9) - X
	:
		(Temp1 >> 2) - Temp1
	end

	function pmul_2_2(int X) --> int :
		(X >> 1)
	end

	function pmul_3_1(int X) --> int
	var
		int Temp1 = X + (X >> 5),
		int Temp2 = (Temp1 >> 2)
	:
		Temp2 + (X >> 4)
	end

	function pmul_3_2(int X) --> int
	var
		int Temp1 = X + (X >> 5),
		int Temp2 = (Temp1 >> 2)
	:
		Temp1 - Temp2
	end

end