/* 
* Copyright (c) 2004-2005 Xilinx Inc.
* All Rights Reserved
*
* Disclaimer:  THIS PROGRAM IS PROVIDED "AS IS" WITH NO WARRANTY 
*              WHATSOEVER AND XILINX SPECIFICALLY DISCLAIMS ANY 
*              IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR
*              A PARTICULAR PURPOSE, OR AGAINST INFRINGEMENT.
*/ 
package ch.epfl.mpeg4.part2.motion;

import org.sc29.wg11.mpeg4.part2.Constants.*;

import org.ietr.mpeg4.part2.sp.ConstantsBtype.*;

actor Framebuffer () 
	int(size=MV_SZ) MV, int(size=BTYPE_SZ) BTYPE, uint(size=8) WD 
	==> 
	int(size=FLAG_SZ) halfpel, uint(size=8) RD :
 
 	int SAMPLES_PER_MB    = 16;
 	int SAMPLES_PER_MB_UV = 8;
  
  	int COMP_PER_MB = 6; // 8x8 blocks/MB

  	int MAXW_IN_SAMPLES    = MAXW_IN_MB * SAMPLES_PER_MB;
  	int MAXW_IN_SAMPLES_UV = MAXW_IN_MB * SAMPLES_PER_MB_UV;
  
  	int MAXH_IN_SAMPLES    = MAXH_IN_MB * SAMPLES_PER_MB;
  	int MAXH_IN_SAMPLES_UV = MAXH_IN_MB * SAMPLES_PER_MB_UV;
  
  	int MAX_FRAME_SIZE    = MAXW_IN_SAMPLES * MAXH_IN_SAMPLES;
  	int MAX_FRAME_SIZE_UV = MAXW_IN_SAMPLES_UV * MAXH_IN_SAMPLES_UV;		
  	

  
  	int HALF_SEARCH    = (SEARCHWIN_IN_MB + 1) / 2;
  	int EXTRA_SPACE    = HALF_SEARCH * SAMPLES_PER_MB * MAXW_IN_SAMPLES;
  	int EXTRA_SPACE_UV = HALF_SEARCH * SAMPLES_PER_MB_UV * MAXW_IN_SAMPLES_UV;

  	int BUFFER_SIZE    = MAX_FRAME_SIZE+EXTRA_SPACE;
  	int BUFFER_SIZE_UV = MAX_FRAME_SIZE_UV + EXTRA_SPACE_UV;

	// luma and chroma buffers
  	List(type: List(type: int(size=32), size=BUFFER_SIZE), size=3) frameBuffer;
 	//List(type: int(size=32), size=BUFFER_SIZE_UV) frameBuffer_U;
  	///List(type: int(size=32), size=BUFFER_SIZE_UV) frameBuffer_V;

 
  	// properties of the VOP_Y
  	int vop_width := 0;             // width in macro blocks
  	int vop_height := 0;             // width in macro blocks
  	int vop_width_in_samples;  // width in samples
  	int vop_height_in_samples; // height in samples
  	int vop_rounding_mode;     // rounding mode: 0,1 
 	int max_outstanding_writes; // Maximum number of outstanding
                                  // writes (unit: 8x8 blocks) before
                                  // we risk "read-before-write" 
  	int start_of_frame := -1;       // Origin in current frame 
  
  
   	// properties of the VOP_U          
  	int vop_width_in_samples_U;  
  	int vop_height_in_samples_U; 
  	int start_of_frame_U := -1;      
    
   
  	int(size=MV_SZ) mvx;            // Motion vector x
  	int(size=MV_SZ) mvy;            // Motion vector y

  	// reading from the frame buffers
  	int mbx_read := 0;              // Macro-block column:  0,...,MAXW_IN_MB-1
  	int mby_read := 0;              // Macro-block row: 0,...,MAXH_IN_MB-1

 
  	int outstanding_writes := 0;    // number of outstanding block writes (used to keep in synch with reads)
  	// writing to the luma frame
  	int mb_write_ptr := 0;          // position in frame buffer
  	int mbx_write := 0;             // Macro-block column: 0,...,MAXW_IN_MB-1
	// writing to the chroma buffers
  	int mb_write_ptr_chroma := 0;          // position in frame buffer

	int comp_so_far := 0;

	//*****IF Y********
  // Move pointers to next block
  	procedure advance_block()
  	begin
  		outstanding_writes := outstanding_writes + 1;
    	// Advance to next block
    	comp_so_far := comp_so_far + 1;
    	if (comp_so_far = COMP_PER_MB) then
			mbx_read := mbx_read + 1;
	  		comp_so_far := 0;
      		if (mbx_read = vop_width) then
        		mbx_read := 0;
        		mby_read := mby_read + 1;
      		end
    	end
    end
  
 	
  // Start a new VOP by setting VOP parameters and initializing the block scan

  cmd.newVop: action BTYPE:[ cmd ] ==>
  guard
    (cmd & NEWVOP) != 0
  do
    vop_rounding_mode := if (cmd & ROUND_TYPE) != 0 then 1 else 0 end;    
    comp_so_far := 0;
  end


  get_w_h: action BTYPE:[ w, h ] ==>
  var
    int last_frame_size = vop_height * SAMPLES_PER_MB * MAXW_IN_SAMPLES,
    int last_frame_size_UV = vop_height * SAMPLES_PER_MB_UV * MAXW_IN_SAMPLES_UV
  do
    vop_width := w;
    vop_height := h;
    
    //*****IF Y********
    vop_width_in_samples := w*SAMPLES_PER_MB;
    vop_height_in_samples := h*SAMPLES_PER_MB;
    
     //*****IF U********
    vop_width_in_samples_U := w*SAMPLES_PER_MB_UV;
    vop_height_in_samples_U := h*SAMPLES_PER_MB_UV;
        
    // Compute the maximum number of writes that can be "outstanding"
    // before we risk reading a block before it is written:
    // the total number of 8x8 blocks in a frame less half the searchwin.    
    max_outstanding_writes := (vop_height - HALF_SEARCH) * vop_width * COMP_PER_MB;
	
    // Advance to next frame
    mbx_read := 0;
    mby_read := 0;
		
    if (last_frame_size != 0) then
      start_of_frame := start_of_frame + last_frame_size;
    else
      start_of_frame := BUFFER_SIZE - vop_height * SAMPLES_PER_MB * MAXW_IN_SAMPLES;
    end    
    if (last_frame_size_UV != 0) then
      start_of_frame_U := start_of_frame_U + last_frame_size_UV;
	else
      start_of_frame_U := BUFFER_SIZE_UV - vop_height * SAMPLES_PER_MB_UV * MAXW_IN_SAMPLES_UV;
	end
    if (start_of_frame >= BUFFER_SIZE) then
      start_of_frame := start_of_frame - BUFFER_SIZE;
    end
	if (start_of_frame_U >= BUFFER_SIZE_UV) then
      start_of_frame_U := start_of_frame_U - BUFFER_SIZE_UV;
    end          
  end  
	
	// Pure texture
  	cmd.noMotion: action BTYPE:[ cmd ] ==>
 	guard
    	(cmd & INTRA) != 0		
  	do
  		advance_block();
  	end
  
  // Pure motion
  	cmd.motion: action BTYPE:[ cmd ] ==>
  	guard
    	(cmd & MOTION) != 0
  	end

  // Encode flags on halfpel: bit2 = interp. x
  //                          bit1 = interp. y
  //                          bit0 = round
  read_mv: action MV:[ x , y ] ==> halfpel:[ flags ]
  var
    int(size=FLAG_SZ) flags = ((x & 1) << 2) + ((y & 1) << 1) + vop_rounding_mode
  do
    mvx := (x >> 1);
    mvy := (y >> 1);
  end

  // No change in the block
  cmd.neither: action BTYPE:[ cmd ] ==> halfpel:[ 0 ]
  do
    mvx := 0;
    mvy := 0;
  end


//*****IF Y********
  // Read one 9x9 block from the frame buffer
  read_fb.Y: action ==> RD:[rd] repeat 81
  guard 
  	outstanding_writes < max_outstanding_writes,
  	comp_so_far < 4
  var
    List(type:int(size=9), size=81) rd,
    int x = mbx_read*SAMPLES_PER_MB + 8*(comp_so_far & 1) + mvx,
    int y := mby_read*SAMPLES_PER_MB + 8*(comp_so_far >> 1) + mvy,
    int clip_left := 0,
    int clip_right := 0,
    int clip_x := x,
    int clip_y = if (y<0) then 0 else if (y<vop_height_in_samples) then y  else vop_height_in_samples-1 end end,
    int start_of_row,
    int addr,
    int i,
    int end_i,
    int temp
  do
    // clip x-coordinate: 0 <= clip_x < width_in_samples
    //                    0 <= clip_left  <= 9
    //                    0 <= clip_right <= 8
    if x < 0 then
    	clip_x := 0;
    	clip_left := if x < -9 then 9 else -x end;
    else 
    	if (x + 9) > vop_width_in_samples then
        	if x >= vop_width_in_samples then
        		clip_x:=vop_width_in_samples-1;
        		clip_right := 8; // 8 (not 9) to get at least one "normal" copy 
        	else
	   			clip_right:=x + 9 - vop_width_in_samples;
       	 	end
      	end
    end

    // Compute start address
    start_of_row := start_of_frame + clip_y*MAXW_IN_SAMPLES + clip_x;
	
	
    // Handle wrap-around
    if (start_of_row>=BUFFER_SIZE) then
      start_of_row := start_of_row - BUFFER_SIZE;
    end

    i:=0;
    while i < 81 do // First clip negative x:es
    	if (clip_left!=0) then
        	end_i := i + clip_left;
        	temp := frameBuffer[0][start_of_row];
        	while (i<end_i) do
          		rd[i] := temp;
          		i:=i+1;
        	end
      	end
      	// copy from frame buffer to RD
      	addr := start_of_row;
      	end_i:= i + 9 - clip_left - clip_right;
      	while i < end_i do
        	rd[i] := frameBuffer[0][addr];
        	i := i + 1;
        	addr := addr + 1;
      	end

      	// then, possibly, clip to right border
      	if (clip_right!=0) then
      		end_i:= i + clip_right;
         	temp := frameBuffer[0][addr-1];
         	while (i<end_i) do
           		rd[i] := temp;
           		i:=i+1;
         	end
      end

      // Advance row (unless we're clipping)
      y := y + 1;
      if (y>0 and y<vop_height_in_samples) then
      	start_of_row := start_of_row + MAXW_IN_SAMPLES;

         // Handle wrap-around
         if (start_of_row>=BUFFER_SIZE) then
         	start_of_row := start_of_row - BUFFER_SIZE;
         end
      end
    end
    advance_block();
  end


//*****IF U********  
  read_fb.U:  action ==> RD:[rd] repeat 81
  guard 
  	outstanding_writes < max_outstanding_writes, comp_so_far = 4
  var
    List(type:int(size=9), size=81) rd,
    int x = mbx_read*SAMPLES_PER_MB_UV + mvx,
    int y := mby_read*SAMPLES_PER_MB_UV + mvy,
    int clip_left := 0,
    int clip_right := 0,
    int clip_x := x,
    int clip_y = if (y<0) then 0 else if (y<vop_height_in_samples_U) then y else vop_height_in_samples_U-1 end end,
    int start_of_row,
    int addr,
    int i,
    int end_i,
    int temp
  do
    // clip x-coordinate: 0 <= clip_x < width_in_samples
    //                    0 <= clip_left  <= 9
    //                    0 <= clip_right <= 8
    if (x < 0) then
      clip_x:=0;
      clip_left:=if x< -9 then 9 else -x end;
    else 
      if (x+9 > vop_width_in_samples_U) then
        if (x>=vop_width_in_samples_U) then
           clip_x:=vop_width_in_samples_U-1;
           clip_right:=8; // 8 (not 9) to get at least one "normal" copy 
        else
	   clip_right:=x + 9 - vop_width_in_samples_U;
        end
      end
    end

    // Compute start address
    start_of_row := start_of_frame_U + clip_y*MAXW_IN_SAMPLES_UV + clip_x;
	
    // Handle wrap-around
    if (start_of_row>=BUFFER_SIZE_UV) then
      start_of_row := start_of_row - BUFFER_SIZE_UV;
    end

    i:=0;
    while (i<81) do
      // First clip negative x:es
      if (clip_left!=0) then
        end_i := i + clip_left;
        temp := frameBuffer[1][start_of_row];        
        while (i<end_i) do
          rd[i] := temp;
          i:=i+1;
        end
      end

      // copy from frame buffer to RD
      addr := start_of_row;
      end_i:= i + 9 - clip_left - clip_right;
      while (i < end_i) do
        rd[i] := frameBuffer[1][addr];
        i := i + 1;
        addr := addr + 1;
      end

      // then, possibly, clip to right border
      if (clip_right != 0) then
      	 end_i:= i + clip_right;
         temp := frameBuffer[1][addr-1];
         while (i<end_i) do
           rd[i] := temp;
           i:=i+1;
         end
      end

      // Advance row (unless we're clipping)
      y := y + 1;
      if (y>0 and y<vop_height_in_samples_U) then
      	 start_of_row := start_of_row + MAXW_IN_SAMPLES_UV;

         // Handle wrap-around
         if (start_of_row>=BUFFER_SIZE_UV) then
           start_of_row := start_of_row - BUFFER_SIZE_UV;
         end
      end
    end
    
    advance_block();
  end
  
  //*****IF V********
  
  read_fb.V: action ==> RD:[rd] repeat 81
  guard 
  	outstanding_writes < max_outstanding_writes
  var
    List(type:int(size=9), size=81) rd,
    int x = mbx_read*SAMPLES_PER_MB_UV + mvx,
    int y := mby_read*SAMPLES_PER_MB_UV + mvy,
    int clip_left := 0,
    int clip_right := 0,
    int clip_x := x,
    int clip_y = if (y<0) then 0 else if (y<vop_height_in_samples_U) then y else vop_height_in_samples_U-1 end end,
    int start_of_row,
    int addr,
    int i,
    int end_i,
    int temp
  do
    // clip x-coordinate: 0 <= clip_x < width_in_samples
    //                    0 <= clip_left  <= 9
    //                    0 <= clip_right <= 8
    if (x < 0) then
      clip_x:=0;
      clip_left := if x < -9 then 9 else -x end;
    else 
      if (x+9 > vop_width_in_samples_U) then
        if (x>=vop_width_in_samples_U) then
           clip_x:=vop_width_in_samples_U-1;
           clip_right:=8; // 8 (not 9) to get at least one "normal" copy 
        else
	   clip_right:=x + 9 - vop_width_in_samples_U;
        end
      end
    end

    // Compute start address
    start_of_row := start_of_frame_U + clip_y*MAXW_IN_SAMPLES_UV + clip_x;
	
//	println("Start of Row ORG: " + start_of_row);
	
    // Handle wrap-around
    if (start_of_row>=BUFFER_SIZE_UV) then
      start_of_row := start_of_row - BUFFER_SIZE_UV;
    end

    i:=0;
    while (i < 81) do
      if (clip_left!=0) then
        end_i := i + clip_left;
        temp := frameBuffer[2][start_of_row];
        while (i<end_i) do
          rd[i] := temp;
          i:=i+1;
        end
      end

      // copy from frame buffer to RD
      addr := start_of_row;
      end_i:= i + 9 - clip_left - clip_right;
      while (i<end_i) do
        rd[i] := frameBuffer[2][addr];
        i := i + 1;
        addr := addr + 1;
      end

      // then, possibly, clip to right border
      if (clip_right!=0) then
      	 end_i:= i + clip_right;
         temp := frameBuffer[2][addr-1];
         while (i<end_i) do
           rd[i] := temp;
           i:=i+1;
         end
      end

      // Advance row (unless we're clipping)
      y := y + 1;
      if (y>0 and y<vop_height_in_samples_U) then
      	 start_of_row := start_of_row + MAXW_IN_SAMPLES_UV;
         // Handle wrap-around
         if (start_of_row>=BUFFER_SIZE_UV) then
           start_of_row := start_of_row - BUFFER_SIZE_UV;
         end
      end
    end
    
    advance_block();
  end
  
  // free-running write to frame buffer is driven by token availability

  action WD:[wd] repeat 384 ==>
  guard 
  	outstanding_writes >= 6
  var
    int addr := mb_write_ptr, 
    int addr_chroma := mb_write_ptr_chroma
  do
  	foreach int y in 0 .. 7 do
  		foreach int x in 0 .. 7 do
  			frameBuffer[0][addr + x] := wd[8*y + x];
  			frameBuffer[0][addr + x + 8] := wd[8*y + x + 64];
  			frameBuffer[0][addr + x + 8 * MAXW_IN_SAMPLES] := wd[8*y + x + 128];
  			frameBuffer[0][addr + x + 8 + 8 *MAXW_IN_SAMPLES] := wd[8*y + x + 192];
  			frameBuffer[1][addr_chroma + x] := wd[8*y + x + 256];
  			frameBuffer[2][addr_chroma + x] := wd[8*y + x + 320];
  		end
  		addr := addr + MAXW_IN_SAMPLES;
  		addr_chroma := addr_chroma + MAXW_IN_SAMPLES_UV;
  	end

    // Advance component to write
    outstanding_writes := outstanding_writes - 6;   
    mbx_write := mbx_write + 1;
     
    mb_write_ptr := mb_write_ptr + SAMPLES_PER_MB;      
    mb_write_ptr_chroma := mb_write_ptr_chroma + SAMPLES_PER_MB_UV;
            
	if (mbx_write = vop_width) then
      	mbx_write := 0;
        mb_write_ptr := mb_write_ptr - SAMPLES_PER_MB*vop_width + SAMPLES_PER_MB*MAXW_IN_SAMPLES;
		mb_write_ptr_chroma := mb_write_ptr_chroma - SAMPLES_PER_MB_UV * vop_width + SAMPLES_PER_MB_UV* MAXW_IN_SAMPLES_UV;
			        	
        if (mb_write_ptr = BUFFER_SIZE) then
        	mb_write_ptr := 0;
			mb_write_ptr_chroma := 0;
		end
	end
      
  end

	
  schedule fsm cmd:
    cmd          ( cmd.newVop     ) --> get_w_h;
	get_w_h      ( get_w_h        ) --> cmd;   
    cmd          ( cmd.noMotion   ) --> cmd;
    cmd          ( cmd.motion     ) --> read_mv;
    cmd          ( cmd.neither    ) --> read_fb;
    read_mv      ( read_mv        ) --> read_fb;
    read_fb      ( read_fb        ) --> cmd;     
  end

  priority
    cmd.newVop > cmd.noMotion > cmd.motion > cmd.neither;
    read_fb.Y > read_fb.U > read_fb.V;
  end

end

