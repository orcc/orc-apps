/*
 * Copyright (c) 2017, SIB Swiss Institute of Bioinformatics 
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the IRISA nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
  
// Author: Simone Casale-Brunet <simone.casalebrunet@sib.swiss>

package alignement.smithwaterman.systolic;

actor LeftBuffer()  uint(size=8) SIZE_READ,
				 	uint(size=8) SIZE_REF_CUTS, 
				 	int(size=16) V
						==> int(size=16) O:
	
	uint(size=8) macroblocks;
	uint(size=8) sizeRead;
	
	uint(size=8) i; 
	uint(size=8) m;
						
	getSize: action SIZE_REF_CUTS:[sm], SIZE_READ:[sb] ==>
	do
		sizeRead := sb;
		macroblocks := sm;
		
		i := 0;
		m := 0;
	end
	
	sendZeros: action  ==> O:[0]
	guard
		i < sizeRead and m = 0
	do
		i := i + 1;
		if i = sizeRead then
			m := 1;
		end
	end
	
	endSendZeros: action ==>
	guard
		i = sizeRead and m = 1
	do
		i := 0;
	end
	
	copyTokens: action V:[v] ==> O:[v]
	do
		i := i + 1;
		if i = sizeRead then
			i := 0;
			m := m + 1;
		end
	end
	
	endCopyTokens: action ==>
	guard m = macroblocks
	end
	
	consumeTokens: action V:[v] ==>
	do
		i := i + 1;
		if i = sizeRead then
			i := 0;
			m := m + 1;
		end
	end
	
	reset : action ==>
	guard
		m > macroblocks
	end
	
	schedule fsm s0:
		s0(getSize) --> s1;
		s1(sendZeros) --> s1;
		s1(endSendZeros) --> s2;
		s2(copyTokens) --> s2;
		s2(endCopyTokens) --> s3;
		s3(consumeTokens) --> s3;
		s3(reset) --> s0;
	end
	
	priority
		endCopyTokens > copyTokens;
		reset > consumeTokens;
	end
	
end