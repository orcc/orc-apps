/*
 * Copyright (c) 2017, SIB Swiss Institute of Bioinformatics 
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the IRISA nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
  
// Author: Simone Casale-Brunet <simone.casalebrunet@sib.swiss>

package alignement.smithwaterman.systolic;

unit Configuration :

	// activate debug mode
	bool DEBUG_MODE = false;

	// number of processing elements
	int PE = 4;
	
	// the identifier of each processing element
	int PE_A = 0;
	int PE_B = 1;
	int PE_C = 2;
	int PE_D = 3;
	
	// masks for retrieving the cell value or the cell direction 
	uint(size=16) MASK_VALUE = 8191; //0b0001111111111111
	uint(size=16) MASK_DIR = 57344;  //0b1110000000000000
	
	// the directions
	uint(size=16) UP = 8192;        //0b0010000000000000
	uint(size=16) LEFT = 16384;     //0b0100000000000000
	uint(size=16) DIAGONAL = 24576; //0b0110000000000000 
	uint(size=16) UNDEFINED = 0;    //0b0000000000000000 
	
	
	procedure printDirection(uint(size=16) d)
	begin
		d := d & MASK_DIR;
		if (d = UP) then
			print("U");
		else
			if (d = LEFT) then
				print("L");
			else
				if (d = DIAGONAL) then
					print("D");
				else
					if (d = UNDEFINED) then
						print("X");
					end
				end
			end
		end
	end

end