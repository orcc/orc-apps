/*
 * Copyright (c) 2017, SIB Swiss Institute of Bioinformatics 
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the IRISA nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
  
// Author: Simone Casale-Brunet <simone.casalebrunet@sib.swiss>

package alignement.smithwaterman.systolic;

import common.Alphabet.*;
import common.util.Math.*;
import alignement.smithwaterman.systolic.Configuration.*;

actor SwCell ()  int(size=16) IN_LEFT, uint(size=3) REF, uint(size=3) READ ==> int(size=16) V :

	// the SW algorithm parameters
	int(size=16) GAP      = -3;
	int(size=16) MATCH    =  5;
	int(size=16) MISMATCH = -3;

	// state variables
	int(size=16) diagonal := 0;
	int(size=16) up := 0;

	compute: action IN_LEFT:[ left ] , REF:[ a ] , READ:[ b ] ==> V:[ v ]
	var
		int(size=16) v, int(size=16) v1, int(size=16) v2, int(size=16) v3
	do
		if (b = EOS) then
			v := 0 | UNDEFINED;
			diagonal := 0;
			up := 0;
		else
			left := left & MASK_VALUE;
			v1 := (if a = b then MATCH else MISMATCH end) + diagonal;
			v2 := left + GAP;
			v3 := up + GAP;
			v := max4(0, v2, v3, v1);
				
			diagonal := left;
			up := v;
			
			// compute direction
			if (v = v1) then
				v := v | DIAGONAL;
			else
				if (v = v2) then
					v := v | LEFT;
				else
					if (v = v3) then
						v := v | UP;
					else
						v := v | UNDEFINED;
					end
				end
			end
		end
	end

end