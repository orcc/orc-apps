/*
 * Copyright (c) 2017, SIB Swiss Institute of Bioinformatics 
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the IRISA nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
  
// Author: Simone Casale-Brunet <simone.casalebrunet@sib.swiss>

package alignement.smithwaterman.systolic;

import common.Alphabet.*;
import alignement.smithwaterman.systolic.Configuration.*;

actor Decoder() 	uint(size=3) REF, 
					uint(size=3) READ, 
					int(size=16) ENC_AL_REF, 
					int(size=16) ENC_AL_READ 
						==>
						uint(size=3) AL_REF, 
						uint(size=3) AL_READ :
	
	bool hasA := false;
	bool hasB := false;
	bool hasE := false; 
						
	uint(size=3) stringA[MAX_STRING_SIZE];
	uint(size=3) stringB[MAX_STRING_SIZE];
	
	uint(size=8) sizeA := 0;
	uint(size=8) sizeB := 0;
	 
	
	getAB: action REF:[a], READ:[b] ==>
		guard (not hasA) and (not hasB)
	do

		if a = EOS then
			hasA := true;
		else
			stringA[sizeA] := a;
			sizeA := sizeA + 1;	
		end
		
		if b = EOS then
			hasB := true;
		else
			stringB[sizeB] := b;
			sizeB := sizeB + 1;	
		end
	end

	getA: action REF:[a] ==>
		guard not hasA
	do
		if a = EOS then
			hasA := true;
		else
			stringA[sizeA] := a;
			sizeA := sizeA + 1;	
		end
	end
	
	getB: action READ:[b] ==>
		guard not hasB
	do
		if b = EOS then
			hasB := true;
		else
			stringB[sizeB] := b;
			sizeB := sizeB + 1;	
		end
	end
	
	trimStrings: action ==>
	guard
		hasA and hasB 
	do		
		hasE := false; 
	end
	
	decode: action ENC_AL_REF:[idxA], ENC_AL_READ:[idxB] ==>AL_REF:[a], AL_READ:[b]
	guard
		not hasE
	var
		uint(size=3)a := N, uint(size=3) b := N
	do
		if(idxA = EOE or idxB = EOE) then
			a := EOS;
			b := EOS;
			hasE := true;
		else 
			if(idxA >=0 and idxA < sizeA) then
				a := stringA[idxA];
			end 
			
			if(idxB >=0 and idxB < sizeB) then
				b := stringB[idxB];
			end
			//a := if idxA != INDEL then stringA[idxA] else N end;
			//b := if idxB != INDEL then stringB[idxB] else N end;
		end
	end
	
	reset: action ==>
	guard
		hasE
	do
		sizeA := 0;
		sizeB := 0;
		hasA := false;
		hasB := false;
	end
	
	schedule fsm s0 :
		s0(getAB) --> s0;
		s0(getA) --> s0;
		s0(getB) --> s0;
		s0(trimStrings) --> s1;
		s1(decode) --> s1;
		s1(reset) --> s0; 
	end
	
	priority
		getAB > getA;
		getAB > getB;
	end

end