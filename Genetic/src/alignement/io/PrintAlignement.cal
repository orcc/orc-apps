/**
 * 
 */
package alignement.io;

import common.Alphabet.*;

actor PrintAlignement () 
	uint(size=3) AL_REF,
	uint(size=3) AL_READ,
	int(size=16) SCORE
	==> :

	uint(size=3) stringA [ MAX_STRING_SIZE ];

	uint(size=3) stringB [ MAX_STRING_SIZE ];

	int(size=16) score;

	uint(size=8) sizeA := 0;

	uint(size=8) sizeB := 0;
	
	int alignementCounter := 0;

	bool hasScore := false;

	bool hasA := false;

	bool hasB := false;

	getScore: action SCORE:[ v ] ==>
	guard
		not hasScore
	do
		score := v;
		hasScore := true;
	end

	getStringA: action AL_REF:[ a ] ==>
	guard
		not hasA
	do
		stringA[sizeA] := a;
		sizeA := sizeA + 1;
		if (a = EOS) then
			hasA := true;
		end
	end

	getStringB: action AL_READ:[ b ] ==>
	guard
		not hasB
	do
		stringB[sizeB] := b;
		sizeB := sizeB + 1;
		if (b = EOS) then
			hasB := true;
		end
	end

	printResult: action ==>
	guard
		hasScore and hasA and hasB
	do
		alignementCounter := alignementCounter + 1;
		print("Alignement: "+alignementCounter+ " >> score: " + score);
		print("\n  REF: ");
		foreach int i in 0 .. sizeA - 1 do
			printChar(stringA[i]);
		end
		print("\n READ: ");
		foreach int i in 0 .. sizeB - 1 do
			printChar(stringB[i]);
		end
		print("\n\n");
		sizeA := 0;
		sizeB := 0;
		hasScore := false;
		hasA := false;
		hasB := false;
	end

end