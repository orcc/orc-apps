/*
 * Copyright (c) 2017, SIB Swiss Institute of Bioinformatics 
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the IRISA nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
  
// Author: Simone Casale-Brunet <simone.casalebrunet@sib.swiss>

package matching.bruteforce.pipeline;

import common.Alphabet.*;
import matching.bruteforce.Configuration.*;

actor StringsCollector() uint(size=3)  REF_IN, 
						 uint(size=3)  READ_IN    ==> 
						 uint(size=3)  REF_OUT,
						 uint(size=8)  REF_SIZE, 
						 uint(size=3)  READ_OUT,
						 uint(size=8)  READ_SIZE:
									
	bool hasRead := false;
	bool hasRef  := false;
	
	uint(size=8) ref_size  := 0;
	uint(size=8) read_size := 0;
	
	uint(size=3) stringRef[MAX_STRING_SIZE_REF];
	uint(size=3) stringRead[MAX_STRING_SIZE_READ];
	
	get_ref: action REF_IN:[val] ==>
	guard
		not hasRef
	do
		stringRef[ref_size] := val;
		hasRef   := val = EOS;
		ref_size := ref_size + 1;
	end
	
	get_read: action READ_IN:[val] ==>
	guard
		not hasRead
	do
		stringRead[read_size] := val;
		hasRead   := val = EOS;
		read_size := read_size + 1;
	end
	
	get_read_ref:  action REF_IN:[ref], READ_IN:[read] ==>
	guard
		(not hasRef) and (not hasRead)
	do
		stringRef[ref_size] := ref;
		hasRef   := ref = EOS;
		ref_size := ref_size + 1;
		
		stringRead[read_size] := read;
		hasRead   := read = EOS;
		read_size := read_size + 1;
	end
	
	send_sequences: action ==>  REF_OUT  :[stringRef]  repeat MAX_STRING_SIZE_REF,
								REF_SIZE :[tmp_ref_size],
							    READ_OUT :[stringRead] repeat MAX_STRING_SIZE_READ,
							    READ_SIZE:[tmp_read_size]
	guard
		hasRef and hasRead
	var
		uint(size=16) tmp_ref_size  = ref_size,
		uint(size=16) tmp_read_size = read_size
	do
		ref_size  := 0;
		read_size := 0;
		
		hasRef  := false;
		hasRead := false;
		
	end
	
	priority
		get_read_ref > get_read;
		get_read_ref > get_ref;
	end
									
end