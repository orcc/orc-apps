/*
 * Copyright (c) 2017, SIB Swiss Institute of Bioinformatics 
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the IRISA nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
  
// Author: Simone Casale-Brunet <simone.casalebrunet@sib.swiss>

package matching.bruteforce.pipeline;

import common.Alphabet.*;
import matching.bruteforce.Configuration.*;

actor StringMatcher() uint(size=3)  REF,
					  uint(size=8) REF_SIZE, 
					  uint(size=3)  READ,
					  uint(size=8) READ_SIZE ==> 
					  int(size=8)  MATCH_IDX :
	
	uint(size=8) ref_size  := 0;
	uint(size=8) read_size := 0;
					  
	uint(size=3) stringRef[MAX_STRING_SIZE_REF];
	uint(size=3) stringRead[MAX_STRING_SIZE_READ];
	
	int(size=32) sum    := 0;
	
	get_strings: action REF:[ref] repeat MAX_STRING_SIZE_REF,
						REF_SIZE:[ref_size_val], 
						READ:[read] repeat MAX_STRING_SIZE_READ,
						READ_SIZE:[read_size_val] ==>
	do
		ref_size  := ref_size_val;
		read_size := read_size_val;
		
		foreach uint(size=16) i in 0 ..  MAX_STRING_SIZE_REF - 1 do
			stringRef[i] := ref[i];
		end
		
		foreach uint(size=16) i in 0 ..  MAX_STRING_SIZE_READ - 1 do
			stringRead[i] := read[i];
		end
		
	end
	
	evaluate_mathcing: action ==> MATCH_IDX:[sum]
	var
		int(size=8) shift_tmp = 0
	do
		sum := 0;
		
		foreach uint(size=32) i in 0 .. MAX_STRING_SIZE_READ - 1 do
			sum := sum + if (i < (read_size-1) and stringRef[i+shift_tmp] = stringRead[i]) then 1 else 0 end;	
		end
		
	end

	schedule fsm s0:
		s0(get_strings)       --> s1;
		s1(evaluate_mathcing) --> s0;
	end
						 
end